<dependencies>
    <dependency>
        <groupId>com.ibm.mq</groupId>
        <artifactId>com.ibm.mq.allclient</artifactId>
        <version>9.2.2.0</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jms</artifactId>
    </dependency>
    <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
        <version>4.0.3</version>
    </dependency>
</dependencies>


# IBM MQ settings
ibm.mq.queueManager=QM1
ibm.mq.channel=CHANNEL1
ibm.mq.connName=localhost(1414)
ibm.mq.user=yourUser
ibm.mq.password=yourPassword

# HikariCP settings
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=2000
spring.datasource.hikari.pool-name=MQPool





import com.ibm.mq.jms.MQConnectionFactory;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.annotation.EnableJms;

import javax.jms.JMSException;
import javax.jms.QueueConnectionFactory;

@Configuration
@EnableJms
public class MqConfig {

    @Bean
    public MQConnectionFactory mqConnectionFactory() throws JMSException {
        MQConnectionFactory mqConnectionFactory = new MQConnectionFactory();
        mqConnectionFactory.setHostName("localhost");
        mqConnectionFactory.setPort(1414);
        mqConnectionFactory.setQueueManager("QM1");
        mqConnectionFactory.setChannel("CHANNEL1");
        mqConnectionFactory.setTransportType(1); // 1 for CLIENT transport mode
        return mqConnectionFactory;
    }

    @Bean
    public HikariDataSource hikariDataSource() throws JMSException {
        HikariConfig config = new HikariConfig();
        config.setDataSource(mqConnectionFactory());
        config.setMaximumPoolSize(10);
        config.setMinimumIdle(5);
        config.setIdleTimeout(30000);
        config.setMaxLifetime(1800000);
        config.setConnectionTimeout(2000);
        config.setPoolName("MQPool");
        return new HikariDataSource(config);
    }

    @Bean
    public QueueConnectionFactory connectionFactory(HikariDataSource hikariDataSource) {
        return new CachingConnectionFactory(hikariDataSource);
    }
}




